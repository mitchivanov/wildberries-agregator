services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: wb_aggregator
      POSTGRES_USER: socialist
      POSTGRES_PASSWORD: revolution2023
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U socialist -d wb_aggregator" ]
    networks:
      - backend-network

  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  backend:
    build: ./admin/backend
    env_file:
      - .env
    environment:
      - DATABASE_URL
      - TELEGRAM_WEBAPP_URL
      - BOT_API_URL
      - TELEGRAM_BOT_TOKEN
      - SUPER_ADMIN_IDS
      - DEVELOPMENT_MODE
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend-network
      - frontend-network

  frontend:
    build:
      context: ./admin/frontend
      args:
        # Добавляем args для передачи в Dockerfile
        - VITE_API_URL=${VITE_API_URL}
        - VITE_ADMIN_LOGIN=${VITE_ADMIN_LOGIN}
        - VITE_ADMIN_PASSWORD=${VITE_ADMIN_PASSWORD}
        - VITE_TELEGRAM_WEBAPP_URL=${VITE_TELEGRAM_WEBAPP_URL}
    volumes:
      # Монтируем статические файлы для системного nginx
      - frontend_static:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - frontend-network
    env_file:
      - .env

  bot:
    build: ./admin/bot
    env_file:
      - .env
    environment:
      - TELEGRAM_BOT_TOKEN
      - TELEGRAM_WEBAPP_URL
      - DATABASE_URL
      - API_URL
      - SUPER_ADMIN_IDS
      - COMMIT_HASH
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend-network

  notification_worker:
    build: ./admin/backend
    command: ["python", "notification_worker.py"]
    env_file:
      - .env
    environment:
      - DATABASE_URL
      - TELEGRAM_WEBAPP_URL
      - BOT_API_URL
      - TELEGRAM_BOT_TOKEN
      - SUPER_ADMIN_IDS
      - DEVELOPMENT_MODE
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - backend
    networks:
      - backend-network
    restart: always

  redis-selfheal:
    build: ./admin/redis-selfheal
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHECK_INTERVAL=60
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs:/logs
    networks:
      - backend-network
    restart: always

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - redis-exporter
      - alertmanager

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379/0
      - REDIS_EXPORTER_CHECK_KEYS=*
      - REDIS_EXPORTER_INCL_SYSTEM_METRICS=true
      - REDIS_EXPORTER_EXPORT_CLIENT_LIST=true
      - REDIS_EXPORTER_IS_CLUSTER=false
      - DEBUG=1
    command:
      - '--include-system-metrics'
      - '--log-format=txt'
      - '--namespace=redis'
      - '--check-keys=*'
    depends_on:
      - redis
    networks:
      - backend-network
      - default

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"

  alert-telegram-bot:
    build: ./alert-telegram-bot
    environment:
      - TELEGRAM_BOT_TOKEN=${ALERT_TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${ALERT_TELEGRAM_CHAT_ID}
    ports:
      - "8081:8081"
    depends_on:
      - alertmanager

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  frontend_static:

networks:
  backend-network:
  frontend-network:
