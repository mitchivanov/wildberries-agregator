import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest, TelegramForbiddenError
from fastapi import FastAPI, Request, HTTPException
import uvicorn
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('telegram_bot')

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è API –±–æ—Ç–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://develooper.ru"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –¢–æ–ª—å–∫–æ –Ω–µ—Ñ—Ä–∏—Ç–æ–≤—ã–π –ª–∏–¥–µ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
SUPER_ADMIN_ID = 5304440647

bot = Bot(token="7205892472:AAGAShZUu-DiXSIYhW7_GSCwZIq-pVT3cNc")
dp = Dispatcher()

WEBAPP_URL = os.getenv("WEBAPP_URL") + "?startapp=1"  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
# –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–æ –Ω–µ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
users_started = set()

class NotificationRequest(BaseModel):
    user_id: int
    goods: dict
    quantity: int
    reservation_date: str

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    users_started.add(message.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
    
    await message.answer(
        "üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wild Berries Assistant!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /shop –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõí",
                    web_app=types.WebAppInfo(url=WEBAPP_URL)
                )
            ]]
        )
    )

@dp.message(Command("shop"))
async def cmd_shop(message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_started.add(message.from_user.id)
    
    await message.answer(
        "üõí –ú–∞–≥–∞–∑–∏–Ω Wild Berries\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ üìã",
                    web_app=types.WebAppInfo(url=WEBAPP_URL)
                )
            ]]
        )
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if str(message.from_user.id) != str(SUPER_ADMIN_ID):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–¥–º–∏–Ω–∞
    users_started.add(message.from_user.id)
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–ü–ö\n\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–ê–¥–º–∏–Ω–∫–∞ –ö–ü–ö üá®üá≥",
                    web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/admin")
                )
            ]]
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
@app.post("/send_notification")
async def send_reservation_notification(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    goods_data = data.get("goods_data", {})
    quantity = data.get("quantity", 1)
    
    if not user_id or not goods_data:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: user_id={user_id}, goods_data={bool(goods_data)}")
        return {"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}
    
    goods_name = goods_data.get("name", "")
    goods_article = goods_data.get("article", "")
    goods_price = goods_data.get("price", 0)
    goods_cashback_percent = goods_data.get("cashback_percent", 0)
    goods_price_with_cashback = goods_price * (1 - goods_cashback_percent / 100)
    goods_image = goods_data.get("image", "")
    purchase_guide = goods_data.get("purchase_guide", "")
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users_started
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_text = (
        f"<b>üõçÔ∏è –¢–æ–≤–∞—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {goods_name}\n"
        f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {goods_article}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"<b>–¶–µ–Ω–∞:</b> <s>{goods_price} ‚ÇΩ</s>\n"
        f"<b>–¶–µ–Ω–∞ —Å –∫—ç—à–±–µ–∫–æ–º {goods_cashback_percent}%:</b> {round(goods_price_with_cashback)} ‚ÇΩ\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–∫—É–ø–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if purchase_guide:
        message_text += f"<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ:</b>\n{purchase_guide}"
    else:
        message_text += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
    
    message_text += "\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üôè"
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if goods_image:
            await bot.send_photo(
                chat_id=user_id,
                photo=goods_image,
                caption=message_text,
                parse_mode=ParseMode.HTML
            )
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode=ParseMode.HTML
            )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return {"status": "success"}
    except TelegramForbiddenError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        logger.warning(error_msg)
        return {"status": "error", "message": error_msg}
    except TelegramBadRequest as e:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API Telegram
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
        logger.error(error_msg)
        return {"status": "error", "message": error_msg}
    except TelegramAPIError as e:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ API Telegram
        error_msg = f"–û—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
        logger.error(error_msg)
        return {"status": "error", "message": error_msg}
    except Exception as e:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
        logger.error(error_msg)
        return {"status": "error", "message": error_msg}

@app.post("/notify")
async def handle_notification(request: NotificationRequest):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id}")
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å –∫—ç—à–±–µ–∫–æ–º
        price = request.goods['price']
        cashback_percent = request.goods.get('cashback_percent', 0)
        price_with_cashback = price * (1 - cashback_percent / 100)
        
        message = (
            "üéâ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
            f"–¢–æ–≤–∞—Ä: {request.goods['name']}\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {request.goods['article']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
            f"–¶–µ–Ω–∞: <s>{price} ‚ÇΩ</s>\n"
            f"–¶–µ–Ω–∞ —Å –∫—ç—à–±–µ–∫–æ–º {cashback_percent}%: {round(price_with_cashback)} ‚ÇΩ\n"
            f"–î–∞—Ç–∞: {request.reservation_date}"
        )
        
        await bot.send_message(
            chat_id=request.user_id,
            text=message,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id}")
        return {"status": "success"}
    except TelegramForbiddenError:
        error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        logger.warning(error_msg)
        raise HTTPException(status_code=403, detail=error_msg)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id}: {str(e)}"
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ FastAPI —Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ uvicorn
    import uvicorn
    from uvicorn import Server
    from uvicorn.config import Config
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    server = Server(
        Config(
            app=app,
            host="0.0.0.0",
            port=8080,
            loop="asyncio",
            log_level="info"
        )
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
    bot_task = asyncio.create_task(dp.start_polling(bot))
    server_task = asyncio.create_task(server.serve())
    
    await asyncio.gather(bot_task, server_task)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 